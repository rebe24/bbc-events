<?php
/**
 * @file
 * Wind Farms installation
 */
 
/**
 * Implements hook_install().
 */
 function bbcevents_install() {
 	// variables to install goes here
 	
 	
 	// Get localization function for installation as t() may be unavailable.
  	$t = get_t();
 
 	 // Give user feedback.
  	drupal_set_message($t('BBC Events variables created.'));
  	
  	// Content type definition
  		$content_type = array(
  		'type' => 'bbcevent',
    	'name' => $t('BBC Event'),
    	'description' => $t('A BBC Event, including location.'),
    	'title_label' => $t('Event Name'),
    	'base' => 'node_content',
    	'custom' => TRUE,
  	
  	);
  	
  	// Set remaining definitions with defaults.
  	$node_type = node_type_set_defaults($content_type);

  	// Save the content type.
  	node_type_save($node_type);
  	
  	// Add a field for the body.
  	// node_add_body_field($node_type, $t('Description'));
  	
  	// Create fields.
  	$fields = array();
  	
  	$fields['bbcevent_address'] = array(
    'field_name' => 'bbcevent_address',
    'type' => 'text',
    // Optional.
    'cardinality' => 1,
    'settings' => array(
     'required' => 'YES',
    ),
  );
  	
  $fields['bbcevent_performing_artist'] = array(
    'field_name' => 'bbcevent_performing_artist',
    'module' => 'taxonomy',
    'type' => 'taxonomy_term_reference',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'required' => 'FALSE',
    ),
  );
  
  	foreach ($fields as $field) {
    	field_create_field($field);
  }
  
  // Create Field Instances.
  $instances = array();
  
  $instances['bbcevent_address'] = array(
    'field_name' => 'bbcevent_address',
    'label' => $t('Event Address'),
    'description' => $t('Address where event is taking place'),
    'widget' => array(
      'type' => 'text_textarea',
    ),
    'required' => TRUE,
    'settings' => array(
      'text_processing' => 0,
    ),
  );
  
  $instances['bbcevent_performing_artist'] = array(
    'field_name' => 'bbcevent_performing_artist',
    'label' => $t('Performing Artist'),
    'description' => $t('The name of the performing artist'),
    'widget' => array(
	'module' => 'taxonomy',    
      'type' => 'taxonomy_term_reference_link',
     ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
      ),
    ),
  );
  
  foreach ($instances as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'bbcevent';
    field_create_instance($instance);
  }
  
 }
 
 /**
 * Implements hook_uninstall().
 */
 function bbcevents_uninstall() {
 	//variable to uninstall goes here
 
 
 	// Inform the user of the removal.
  	$t = get_t();
	drupal_set_message($t('BBC Events variables removed.'));
	
	 // Get all node IDs with bbcevent content type.
  $sql_query  = 'SELECT nid ';
  $sql_query .= 'FROM {node} ';
  $sql_query .= 'WHERE {node}.type = :type ';
  $result = db_query($sql_query, array(':type' => 'bbcevent'));

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all bbcevent content.
  node_delete_multiple($nids);
  drupal_set_message($t('BBC Events content removed.'));

  // Remove all fields and field instances.
  foreach (field_info_instances('node', 'bbcevent') as $field_name => $instance) {
    field_delete_field($field_name);
    field_delete_instance($instance);
  }
  drupal_set_message($t('BBC Events field and field instances removed.'));

  // Delete the content type.
  node_type_delete('bbcevent');
  drupal_set_message($t('BBC Event Content Type removed.'));

  // Clean up deleted fields.
  field_purge_batch(1000);
 }